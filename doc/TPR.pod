=head1 App::SweeperBot - Play Minesweeper, automatically!

You sit down at the machine, it's running Windows.  Those other
operating systems are pretty good, but they're lacking that one killer
app, the one reason why Windows still has market dominance.

Minesweeper.

Yes, good old Minesweeper!  You'll just play one game, on
intermediate, and then start on your real work.  Just a little morsel
of relaxation.  Three hours later, you're wondering what happened to
your day.

Does this story sound familiar, or have you a friend or work-mate
who's in the jaws of the Minesweeper vice?  I know that I was, so
one day, I decided to do something about it.

I'd program my machine to play Minesweeper for me.

I'd automated the rest of my life; I have programs to read my
mail, to plan my exercise, and to pay my bills.  Automating my
leisure time was the obvious next step.  Having a program to
play Minesweeper for me would give me more time for the more
important things in life... like Solitaire.

It was from this realisation that C<App::SweeperBot> was born.

=head2 Why a Minesweeper bot?

I'm a lazy person.  I hate having to do things myself, and I
really hate having to write my own code.  Indeed, one of the
motivating factors for writing C<App::SweeperBot> is that much
of the hard work had already been done for me.

Matt Sparks (L<http://www.f0rked.com>) had already written an almost
complete Minesweeper bot, doing what I had considered all the "hard
parts".  Matt's code was able to locate the board, start a new game,
and identify the contents of various squares.  All I had to do was to
write an algorithm to get it to play.

Of course, when asked by serious professionals with lots of money why I
wrote C<App::SweeperBot>, I claim it's because it provides an
excellent working example of being able to examine and control
GUI applications using Perl.  These techniques can be a great
advantage in testing and automation.

=head2 Locating Minesweeper

The first step for SweeperBot in playing Minesweeper is to
locate the game on the screen.  SweeperBot uses the
C<Win32::GuiTest> module for GUI manipulation, and this
also makes locating the Minesweeper board easy:

    use Win32::GuiTest qw(FindWindowLike);

    my ($window_id) = FindWindowLike(0, '^Minesweeper');

C<FindWindowLike> returns a list of matching windows, but I'm
only interested in the first one.  The first argument to
C<FindWindowLike> is the root of our window search; it can be
an existing window if we're looking for a dialog box or
similar window spawned by an application, but for SweeperBot
we're using C<0>, to look for any window that matches our
criteria.

The second argument is a regexp that matches our window name.
In the case of SweeperBot, I'm simply looking for any window
that starts with C<Minesweeper>.

Once we've found our window, the next task is to determine how
large it is; SweeperBot needs this information to determine the size
of the Minesweeper grid, and to locate the all-important smiley face
that's used to determine our game state (won/lost/playing) and to
reset the game.

    use Win32::GuiTest qw(GetWindowRect);

    my ($left, $top, $right, $bottom) = GetWindowRect($window_id);

    my $width  = $right - $left;
    my $height = $bottom - $top;

The C<GetWindowRect> function returns the window location, with
the top-left of the entire display being considered pixel (0,0).

The calculations for determining the size of the grid and the
position of the smiley are not shown, but they mostly consist
of basic arithmetic (each square is 16 x 16 pixels, and the
smiley is always in the centre-top part of the window).

=head2 Reading the screen

To actually read the screen I use another module,
C<Win32::Screenshot>, which provides a C<CaptureRect> function
for capturing parts of the screen:

    use Win32::Screenshot;

    my $image = CaptureRect(
        $left + $LEFT_OFFSET + $sx * SQUARE_WIDTH,
        $top  + $TOP_OFFSET  + $sy * SQUARE_HEIGHT,
        SQUARE_WIDTH,
        SQUARE_HEIGHT
    );

The C<CaptureRect> function takes an X,Y offset to the top-left of
the rectangle desired, and the desired width and height of the
rectangle.

In the code above, C<$LEFT_OFFSET> and C<$TOP_OFFSET> are values that
take us to the top-left of the Minesweeper grid, past any window
decorations.  C<$sx> and C<$sy> are the square SweeperBot wishes to
sample, and C<SQUARE_WIDTH> and C<SQUARE_HEIGHT> are constants
containing the width and height of a Minesweeper square; in this case
they're 16 pixels each.

As a convention, I use C<$sx> and C<$sy> when measuring an offset
in Minesweeper squares, and C<$x> and C<$y> when measuring in
pixels.  Without this convention, parts of the application code
would be significantly more difficult to understand.

The resulting C<$image> is actually an C<Image::Magick> object,
which are extremely versatile, and therefore provide a great
amount of flexibility in how we can analyse the information
contained within.

=head2 What's in that square?

SweeperBot takes a very simple approach to determining the contents
of each square; it simply takes a SHA-256 digest of the image
(a fingerprint) and looks that up in a hash of known values:

    my $signature = $image->Get("signature");

    my $contents = $contents_of_square{$signature};

This works admirably, but as I discovered somewhat later is not
particularly portable.  The results of C<Get("signature")> can
vary depending upon the version of C<Image::Magick> installed,
so SweeperBot needs to contain multiple signatures to cover all
of them.

=head2 Manipulating the mouse

The C<Win32::GuiTest> module provides a way both to move the mouse and
press buttons, and using this we can construct a simple subroutine to
click on an arbitrary part of the display:

    use Win32::GuiTest qw(MouseMoveAbsPix SendMouse);

    sub click {
        my ($this, $x, $y, $button) = @_;
        $button ||= '{LEFTCLICK}';
        MouseMoveAbsPix($x, $y);
        SendMouse($button);
        return;
    }

However we don't want to be clicking anywhere on our display, we
specifically want to be clicking on Minesweeper squares.  Luckily,
we already know the size of them, and the position of our Minesweeper
window, so writing a subroutine to do this becomes easy:

    sub press {
        my ($this, $sx, $sy, $button) = @_;

        $this->click(
            $left + $LEFT_OFFSET + $sx * SQUARE_WIDTH  + SQUARE_WIDTH/2,
            $top  + $TOP_OFFSET  + $sy * SQUARE_HEIGHT + SQUARE_HEIGHT/2,
            $button
        );

        return;
    }

The C<SQUARE_WIDTH/2> and C<SQUARE_HEIGHT/2> terms ensure we're
clicking on the middle of each square.

We can now use C<press> to easily define subroutines that flag
a mine (right-click) or pressing all squares adjacent to it
(middle-click, what I call a "stomp").

    sub flag_mine {
        my ($this, $sx, $sy) = @_;

        return $this->press($sx, $sy, '{RIGHTCLICK}');
    }

    sub stomp {
        my ($this, $sx, $sy) = @_;

        return $this->press($sx, $sy, '{MIDDLECLICK}');
    }

=head2 Putting it all together

With the techniques seen, it's now possible to play a basic
game of Minesweeper.  We have code to locate the window, sample
the contents, and manipulate controls.

In C<App::SweeperBot>, the algorithm to actually play is found
in C<make_move>, which I won't reproduce here.  Put simply, it
walks through every square and looks at all the adjacent squares
at each point.  If by examining just those adjacent square it can
determine that a square is a mine or safe, then it flags or presses
the square as appropriate.  If SweeperBot walks through the entire
board without flagging or pressing any squares, it takes a guess and
steps on a random covered square.

This isn't an optimal Minesweeper strategy, since looking further than
just the adjacent squares can reveal more information about each
square.  Likewise, when guessing, it should be possible to use the
information available to determine the safest guesses and try those
first.  Presently, SweeperBot does neither.

Luckily, you can write your own algorithm for playing by sub-classing
C<App::SweeperBot>:

    package My::SweeperBot;

    use base qw(App::SweeperBot);

    sub make_move {
        my ($this, $state) = @_;

        # Make your moves here.  When this subroutine is exited,
        # App::SweeperBot will check the game state, and if we haven't
        # won or lost, it will re-sample the board and call
        # make_move again.

    }

The C<$state> variable is a reference to an array of arrays which
represent the board.  The top-left square is C<[1,1]> (and not
C<[0,0]>), since that's
what Matt's original code used.

=head2 Cheating

Because my algorithm for playing Minesweeper isn't very good,
SweeperBot can also be run using the xyzzy cheat, that
reveals information about the contents of each mine by changing
the colour of top-left pixel of the entire display.  If cheating is
enabled (it is by default) then SweeperBot will reconsider if
picking a square at random would result in hitting a mine.

I have Audrey Tang to thank for information about the xyzzy cheat;
having a bot that wins every time is much more impressive than one
that wins only some of the time.

=head2 Packaging

An application isn't any good unless people actually use it.  However
for a typical Windows user, installing Perl can seem like quite a bit
of effort, let alone installing a set of custom modules and their
dependencies.  In fact, just getting C<Win32::Screenshot>,
C<Image::Magick> and C<Win32::GuiTest> working together on my own
system required more work than I had expected.

Luckily, packaging stand-alone applications on Windows becomes much
easier with the use of PAR, the Perl Archiver.  Put simply, PAR
allows a Perl program, its associated modules, and any other files it
depends upon to be bundled up into a single file.  Under the hood, it
uses the excellent L<Module::ScanDeps> to determine what additional
modules should be included; so for more programs it works right out of
the box.

I used C<PAR::Packer>, or more specifically its command-line C<pp>
program, to create my stand-alone application.  Because it needed
to contain my code, a perl interpreter, supporting modules, and
a number of C<Image::Magick> DLL files, the resulting program is
seven megabytes in size.  Despite the large size, I now had something
that could be dropped onto a virgin Windows system and work with
nothing more than the user double-clicking the icon.

One particular challenge was finding a portable version of
L<Image::Magick> that does not depend upon local registry settings,
which PAR cannot bundle.  Luckily, J-L Morel has a pre-built
L<Image::Magick> distribution at L<http://bribes.org/perl/ppmdir.html>
which doesn't use the Windows registry settings at all.  As
advertised, it's completely compatible with PAR.

To see the complete build script that produces the executable,
check out C<MakeExe.pl> that comes with the C<App::SweeperBot>
distribution.  This file can also be found at
L<http://github.com/pfenwick/sweeperbot/tree/master/MakeExe.pl>.

=head2 Improvements

SweeperBot has ample room for improvement.  The current method of
sampling each square individually, computing an SHA-256 hash of the
contents, and using the result to determine the square contents
is extremely slow, although it was the "lazy" option that allowed
me to re-use the largest amount of Matt's original code.  A better
way would be to sample the entire board at once.  Since each numbered
square uses a different colour, individual pixels could be examined
to determine the board configuration.  I imagine such an improvement
would increase SweeperBot's speed by an order of magnitude or more.

Changing the methods for sampling the board also provides for the
potential to remove the dependency on C<Image::Magick>, which
is responsible for a significant portion of the final executable.

Much of the code in C<App::SweeperBot> reflects its history
of being a stand-alone script.  As such, it's not possible to
create multiple SweeperBot objects for playing multiple games
of Minesweeper simultaneously, since too much information is
read from package variables.  This information should be moved
to be internal to each individual C<App::SweeperBot> object.

The other obvious flaw with SweeperBot is that it plays
Minesweeper only about as well as I do.  Luckily this can
easily be changed by sub-classing and writing a new
C<make_move> method, as described earlier in this article.

=head2 Further Information

SweeperBot has its own webpage at L<http://sweeperbot.org/>, which
includes an FAQ, links to the source code, and a promotional
video explaining why SweeperBot is an excellent productivity tool.

The SweeperBot code repository is managed with git.  Even if you've
never used git before, you can still obtain a copy of the source
with:

    git clone git://github.com/pfenwick/sweeperbot.git

You can also browse the source and its history on-line at
L<http://github.com/pfenwick/sweeperbot>.

Perl Training Australia (L<http://perltraining.com.au>) has written
a short tutorial on PAR, which also contains links to other
resources.  It can be found at
L<http://perltraining.com.au/tips/2008-05-23.html>
